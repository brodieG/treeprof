% Generated by roxygen2 (4.0.1): do not edit by hand
\name{chop_stack_recurse}
\alias{chop_stack_recurse}
\title{Recursively Descend into Rprof Ouput to Create Data for \code{`treeprof`}}
\usage{
chop_stack_recurse(dt, by, n, depth = 0L)
}
\arguments{
\item{dt}{a data table}

\item{by}{a one length character vector denoting what the grouping variable
value is}

\item{n}{how many items in each group}

\item{depth}{how many levels we have recursed}
}
\value{
data table
}
\description{
Key next step is to prove that the output datatable can meaningfully
be interpreted by row order.  In other words, if level n shows up once,
and then at some later point you get level n again, then you are guaran-
teed that it is a from a different call stack.  Similarly, for all levels
n, all subsequent rows with levels > n are children to that row.
}
\details{
Prelim, it seems this is true since every time data.table groups it
effectively orders? Actually, not so, consider the sequence:

a b c
a e
a b d

These would erroneously get collapsed into the same stack at b.  Is that bad?
This is fine, but needs to be documented to avoid confusion

Also, other items:
- remember to check whether a function is called from different call stacks
  to aggregate how much time is taken up by that function
}
\keyword{internal}

